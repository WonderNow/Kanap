let data;
let id;



// RÃ©cupÃ¨re l'ID prÃ©sent dans l'URL concernÃ©e
let url = new URL(window.location.href);
console.log(url);
let search_params = new URLSearchParams(url.search);
// VÃ©rifie si le paramÃ¨tre existe dans l'URL â†’ si oui, @return true;
if (search_params.has('id')) {
    // RÃ©cupÃ¨re l'ID dans les paramÃ¨tres de l'URL 
    id = search_params.get('id');
}



/**
 * CrÃ©ation de la fonction async fetchID
 * Appelle l'API pour rÃ©cupÃ©rer le produit associÃ© a l'ID prÃ©sent dans l'URL concernÃ©e
 * @param productID - Identifiant du produit
 * @return data - Contient les donnÃ©es du produit concernÃ© 
 */
export default async function fetchID(productID)
{ 
    if (productID !== undefined) {

        // Appelle l'API avec l'ID prÃ©sent dans l'URL 
        return await fetch('http://localhost:3000/api/products/' + productID)
            // Convertit la rÃ©ponse au format json 
            .then(function (res) {
                if (res.ok) {
                    return res.json();
                }
            })

            .then(async function (value) {
                // Attend la rÃ©ponse du serveur et stocke cette derniÃ¨re dans une variable 
                data = await value;

                if (data) {
                    console.log(data);
                }
                return data

            })
            .catch(function (err) {

                // En cas d'erreur : 
                console.log("Une erreur est survenue : " + err);
            });
    }
};



/**
 * Appelle de la function fetchID()
 * RÃ©cupÃ¨re le rÃ©sultat de la requÃªte dans une variable 
 * Enfin, appelle la function produit avec l'article rÃ©cupÃ©rÃ© 
 */
 fetchID(id)
 .then((data) => {produit(data) })
 .catch((err) => console.log(err));



/**
 Ajoute les donnÃ©es de l'API dans les diffÃ©rentes balises du DOM
 @param {*} data 
*/
async function produit(data) {
    console.log(data);
    if (data !== undefined) {
        // RÃ©cupÃ¨re la balise avec la classe 'item_img' et lui ajoute l'image du produit */
        const item__img = document.getElementsByClassName("item__img");
        item__img[0].innerHTML = "<img src=" + data.imageUrl + " alt=" + data.altTxt + "></img>";

        //RÃ©cupÃ¨re la balise qui contient l'ID 'title' et ajoute le nom de l'data
        const title = document.getElementById('title');
        title.innerText = data.name;

        //RÃ©cupÃ¨re la balise qui contient la classe 'price' et ajoute le prix de l'article 
        const price = document.getElementById('price');
        price.innerText = data.price;

        // RÃ©cupÃ¨re la balise qui contient l'id 'description' et ajoute la description de l'article 
        const description = document.getElementById('description');
        description.innerText = data.description;

        // RÃ©cupÃ¨re les couleurs dans le tableau des couleurs du produit 
        // RÃ©cupÃ¨re la balise qui contient l'ID colors et ajoute les couleurs
        for (let colors of data.colors) {
            let productColors = document.createElement("option");
            document.querySelector("#colors").appendChild(productColors);
            productColors.value = colors;
            productColors.innerHTML = colors;
        }
    }
}



// Alertes d'erreur ou de confirmation + Ajout du produit dans le local storage
const buttonAddToCart = document.querySelector("#addToCart")
if (buttonAddToCart != null) {
    buttonAddToCart.addEventListener("click", (e) => {
        const color = document.querySelector("#colors").value
        const quantity = document.querySelector("#quantity").value
        // SI la couleur ET le nombre de canapÃ©s voulus ne sont pas indiquÃ©s par l'utilisateur ALORS on envoie une alerte d'erreur personnalisÃ©e
        if (color == null || color === "" && quantity == 0) {
            alert("Oups... ðŸ¥º\n\nTu n'as pas sÃ©lectionnÃ© de couleur pour ton canapÃ©, et tu n'as pas indiquÃ© combien tu en souhaites.\n\nVa vite arranger tout Ã§a ! ðŸ˜‰")
            return
        }
        // SI la couleur est indiquÃ©e mais pas le nombre ALORS on envoie une alerte d'erreur personnalisÃ©e
        if (color != null && color != "" && quantity == 0) {
            alert("Oups... ðŸ¥º\n\nTu n'as pas indiquÃ© combien tu veux de canapÃ©s.\n\nVa vite arranger Ã§a ! ðŸ˜‰")
            return
        }
        // SI le nombre est indiquÃ© mais pas la couleur ALORS on envoie une alerte d'erreur personnalisÃ©e
        if (color == null || color === "" && quantity > 0) {
            alert("Oups... ðŸ¥º\n\nTu n'as pas sÃ©lectionnÃ© de couleur pour ton canapÃ©.\n\nVa vite arranger Ã§a ! ðŸ˜‰")
            return
        }
        // SI la couleur ET le nombre de canapÃ©s voulus sont correctement indiquÃ©s par l'utilisateur ALORS on envoie une alerte de confirmation personnalisÃ©e
        if (color != null && color != "" && quantity > 0) {
            alert("FÃ©licitations ! ðŸŽ‰\n\nCet article a bien Ã©tÃ© ajoutÃ© Ã  ton panier ! ðŸ˜‰")
            window.location.href = "cart.html" // Envoie directement sur la page Panier
        }

        // Ajout du produit dans le local storage
        const dataForCart = {
            color: color,
            id: id,
            quantity: Number(quantity)
        }
        let produitLocalStorage = JSON.parse(localStorage.getItem("dataForCart"));

        if(produitLocalStorage == null){
            produitLocalStorage = [];
        }

        produitLocalStorage.push(dataForCart);

        localStorage.setItem("dataForCart", JSON.stringify(produitLocalStorage)) // JSON.stringify() permet de transformer les donnÃ©es au format JSON afin de pouvoir les exploiter
    })
}